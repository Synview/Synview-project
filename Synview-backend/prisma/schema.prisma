// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"
  output   = "../generated/prisma"
  runtime  = "deno"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  user_id            Int                  @id @default(autoincrement())
  username           String
  email              String
  passwordHash       String
  created_at         DateTime             @default(now())
  role               Roles                @default(USER)
  projects           user_projects[]      
}

model projects {
  project_id  Int      @id @default(autoincrement())
  title       String
  description String
  owner_id    Int
  repo_url    String?
  doc_url     String?
  created_at  DateTime @default(now())

  user_projects user_projects[] 
  updates       updates[]      
  goals         goals[]
}

model user_projects {
  user_project Int          @id @default(autoincrement())
  project_id   Int
  user_id      Int
  role         ProjectRoles
  users        users        @relation(fields: [user_id], references: [user_id])
  projects     projects     @relation(fields: [project_id], references: [project_id])
  created_at   DateTime     @default(now())

  @@unique([user_id, project_id])
}

model updates {
  update_id    Int      @id @default(autoincrement())
  description  String
  summary      String?
  code_changes String?
  created_at   DateTime @default(now())
  user_id      Int
  project_id   Int

  project   projects    @relation(fields: [project_id], references: [project_id])
  comments  comments[]
  questions questions[]
}

model comments {
  comment_id Int @id @default(autoincrement())

  content    String
  created_at DateTime @default(now())
  update_id  Int
  user_id    Int

  updates updates @relation(fields: [update_id], references: [update_id])
}

model questions {
  question_id Int      @id @default(autoincrement())
  content     String
  created_at  DateTime @default(now())
  update_id   Int
  user_id     Int

  updates            updates              @relation(fields: [update_id], references: [update_id])
  question_responses question_responses[]
}

model question_responses {
  question_response_id Int       @id @default(autoincrement())
  content              String
  created_at           DateTime  @default(now())
  question_id          Int
  user_id              Int
  questions            questions @relation(fields: [question_id], references: [question_id])
}

model goals {
  goal_id    Int      @id @default(autoincrement())
  title      String
  due_date   DateTime
  status     Status   @default(PENDING)
  project_id Int
  projects   projects @relation(fields: [project_id], references: [project_id])
}

enum Roles {
  USER
  MENTOR
}

enum ProjectRoles {
  CREATOR
  VIEWER
  REVIEWER
}

enum Status {
  PENDING
  PROGRESS
  DONE
}
