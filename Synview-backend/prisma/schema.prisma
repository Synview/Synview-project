// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"
  output   = "../generated/prisma"
  runtime  = "deno"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  UserId           Int                @id @default(autoincrement())
  username         String
  email            String
  passwordHash     String
  created_at       DateTime           @default(now())
  role             Role               @default(USER)
  Projects         User_Project[]     @relation()
  Update           Update[]
  Comment          Comment[]
  Question         Question[]
  QuestionResponse QuestionResponse[]
}

model Project {
  ProjectId   Int      @id @default(autoincrement())
  title       String
  description String
  owner_id    Int
  repo_url    String?
  doc_url     String?
  created_at  DateTime @default(now())

  userProjects     User_Project[] @relation() // Think on how would i give access to add changes only on the owner_id
  Update   Update[]       @relation()
  Question Question[]     @relation()
  Goal     Goal[]
}

model User_Project {
  User_Project Int          @id @default(autoincrement())
  ProjectId    Int
  UserId       Int
  role         ProjectRoles
  User         User         @relation(fields: [UserId], references: [UserId])
  Project      Project      @relation(fields: [ProjectId], references: [ProjectId])
  created_at   DateTime     @default(now())

  @@unique([UserId, ProjectId])
}

model Update {
  UpdateId     Int      @id @default(autoincrement())
  Comments     String
  summary      String?
  code_changes String?
  created_at   DateTime @default(now())
  UserId       Int
  ProjectId    Int

  User    User      @relation(fields: [UserId], references: [UserId])
  Project Project   @relation(fields: [ProjectId], references: [ProjectId])
  Comment Comment[]
}

model Comment {
  CommentId Int @id @default(autoincrement())

  content    String
  created_at DateTime @default(now())
  UpdateId   Int
  UserId     Int

  User   User   @relation(fields: [UserId], references: [UserId])
  Update Update @relation(fields: [UpdateId], references: [UpdateId])
}

model Question {
  QuestionId Int      @id @default(autoincrement())
  content    String
  created_at DateTime @default(now())
  ProjectId  Int
  UserId     Int

  User             User               @relation(fields: [UserId], references: [UserId])
  Project          Project            @relation(fields: [ProjectId], references: [ProjectId])
  QuestionResponse QuestionResponse[]
}

model QuestionResponse {
  QuestionResponseId Int      @id @default(autoincrement())
  content            String
  created_at         DateTime @default(now())
  QuestionId         Int
  UserId             Int
  User               User     @relation(fields: [UserId], references: [UserId])
  Question           Question @relation(fields: [QuestionId], references: [QuestionId])
}

model Goal {
  GoalId    Int      @id @default(autoincrement())
  title     String
  due_date  DateTime
  status    Status   @default(PENDING)
  ProjectId Int
  Project   Project  @relation(fields: [ProjectId], references: [ProjectId])
}

model Notification {
  NotificationId Int @id @default(autoincrement())
}

enum Role {
  USER
  MENTOR
}

enum ProjectRoles {
  CREATOR
  VIEWER
  REVIEWER
}

enum Status {
  PENDING
  PROGRESS
  DONE
}
