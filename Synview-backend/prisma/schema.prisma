// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"
  output   = "../generated/prisma"
  runtime  = "deno"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  user_id           Int                 @id @default(autoincrement())
  username          String
  email             String
  passwordHash      String
  created_at        DateTime            @default(now())
  role              Role                @default(USER)
  projects          user_project[]      @relation()
  update            update[]
  comment           comment[]
  question          question[]
  question_response question_response[]
}

model project {
  project_id  Int      @id @default(autoincrement())
  title       String
  description String
  owner_id    Int
  repo_url    String?
  doc_url     String?
  created_at  DateTime @default(now())

  user_projects user_project[] @relation() // Think on how would i give access to add changes only on the owner_id
  update        update[]       @relation()
  goal          goal[]
}

model user_project {
  user_project Int          @id @default(autoincrement())
  project_id   Int
  user_id      Int
  role         ProjectRoles
  user         user         @relation(fields: [user_id], references: [user_id])
  project      project      @relation(fields: [project_id], references: [project_id])
  created_at   DateTime     @default(now())

  @@unique([user_id, project_id])
}

model update {
  update_id    Int      @id @default(autoincrement())
  comments     String
  summary      String?
  code_changes String?
  created_at   DateTime @default(now())
  user_id      Int
  project_id   Int

  user     user       @relation(fields: [user_id], references: [user_id])
  project  project    @relation(fields: [project_id], references: [project_id])
  comment  comment[]
  question question[] @relation()
}

model comment {
  comment_id Int @id @default(autoincrement())

  content    String
  created_at DateTime @default(now())
  update_id  Int
  user_id    Int

  user   user   @relation(fields: [user_id], references: [user_id])
  update update @relation(fields: [update_id], references: [update_id])
}

model question {
  question_id Int      @id @default(autoincrement())
  content     String
  created_at  DateTime @default(now())
  update_id   Int
  user_id     Int

  user              user                @relation(fields: [user_id], references: [user_id])
  update            update              @relation(fields: [update_id], references: [update_id])
  question_response question_response[]
}

model question_response {
  question_response_id Int      @id @default(autoincrement())
  content              String
  created_at           DateTime @default(now())
  question_id          Int
  user_id              Int
  user                 user     @relation(fields: [user_id], references: [user_id])
  question             question @relation(fields: [question_id], references: [question_id])
}

model goal {
  goal_id    Int      @id @default(autoincrement())
  title      String
  due_date   DateTime
  status     Status   @default(PENDING)
  project_id Int
  project    project  @relation(fields: [project_id], references: [project_id])
}

enum Role {
  USER
  MENTOR
}

enum ProjectRoles {
  CREATOR
  VIEWER
  REVIEWER
}

enum Status {
  PENDING
  PROGRESS
  DONE
}
